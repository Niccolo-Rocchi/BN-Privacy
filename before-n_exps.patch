diff --git a/Plot_results.ipynb b/Plot_results.ipynb
index f0281c3..a8600de 100644
--- a/Plot_results.ipynb
+++ b/Plot_results.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 147,
    "id": "b53ad4f3",
    "metadata": {},
    "outputs": [],
@@ -16,44 +16,40 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
-   "id": "28499dc9",
+   "execution_count": 148,
+   "id": "38577237",
    "metadata": {},
    "outputs": [],
    "source": [
-    "# Import results\n",
-    "path = \"./results/idm\"\n",
-    "results = os.listdir(path)\n",
+    "# Define plot function: error vs power (semilogx)\n",
+    "def plot_results(r: pd.DataFrame):\n",
+    "    fig, ax = plt.subplots(1,1, figsize=(6, 3))\n",
+    "    kwargs = {\"lw\":2, \"ms\":4, \"alpha\": 1}\n",
     "\n",
-    "# Choose which to plot\n",
-    "r_path = f\"{path}/exp_2-compl39.csv\"\n",
-    "r = pd.read_csv(r_path).drop(\"Unnamed: 0\", axis=1)\n",
+    "    # Theoretical bound\n",
+    "    ax.semilogx(r[\"error\"], r[\"power_bound\"], \"r-^\", label = 'Theoretical', **kwargs)\n",
     "\n",
-    "n_bns = r.shape[1] - 3\n",
-    "r_bns = r.iloc[:,-n_bns:]\n",
+    "    # BN\n",
+    "    ax.semilogx(r[\"error\"], r[\"power_BN\"], \"-o\", label = 'BN', **kwargs)\n",
     "\n",
-    "# r_bns.columns"
+    "    # CN (avg, min, max)\n",
+    "    ax.semilogx(r[\"error\"], r[\"CN_avg\"], \"-s\", label = f'CN Avg', **kwargs)\n",
+    "    ax.fill_between(r[\"error\"], r[\"CN_min\"], r[\"CN_max\"], color=\"b\", alpha=0.5)\n",
+    "\n",
+    "    # Plot info\n",
+    "    ax.set(title='Semilogx')\n",
+    "    ax.legend()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
-   "id": "dac96210",
+   "execution_count": 149,
+   "id": "28499dc9",
    "metadata": {},
    "outputs": [
     {
      "data": {
-      "text/plain": [
-       "<matplotlib.legend.Legend at 0x7fbb91296090>"
-      ]
-     },
-     "execution_count": 16,
-     "metadata": {},
-     "output_type": "execute_result"
-    },
-    {
-     "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 600x300 with 1 Axes>"
       ]
@@ -63,28 +59,29 @@
     }
    ],
    "source": [
-    "## Plot: error vs power (semilogx)\n",
-    "fig, ax = plt.subplots(1,1, figsize=(6, 3))\n",
-    "kwargs = {\"lw\":2, \"ms\":4, \"alpha\": 1}\n",
-    "\n",
-    "# Theoretical bound\n",
-    "ax.semilogx(r[\"error\"], r[\"power_bound\"], \"r-^\", label = 'Theoretical', **kwargs)\n",
-    "\n",
-    "# BN\n",
-    "ax.semilogx(r[\"error\"], r[\"power_BN\"], \"-o\", label = 'BN', **kwargs)\n",
+    "# Import all results\n",
+    "path = \"./results/idm\"\n",
+    "results = os.listdir(path)\n",
     "\n",
-    "# CN (avg, min, max)\n",
-    "ax.semilogx(r[\"error\"], r_bns.mean(axis=1), \"-s\", label = f'CN Avg ({n_bns})', **kwargs)\n",
-    "ax.fill_between(r[\"error\"], r_bns.min(axis=1), r_bns.max(axis=1), color=\"b\", alpha=0.5)\n",
+    "# Choose which one to plot\n",
+    "r_path = f\"{path}/exp_1-compl15.csv\"\n",
+    "results = pd.read_csv(r_path)\n",
     "\n",
-    "# Plot info\n",
-    "ax.set(title='Semilogx')\n",
-    "ax.legend()"
+    "# Plot results\n",
+    "plot_results(results)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": null,
+   "id": "dac96210",
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 150,
    "id": "2627d91e",
    "metadata": {},
    "outputs": [
@@ -92,8 +89,8 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "BN AUC: 0.5171067106710671\n",
-      "CN Avg AUC: 0.45298129812981286\n"
+      "BN AUC: 0.4548\n",
+      "CN Avg AUC: 0.0\n"
      ]
     }
    ],
diff --git a/README.md b/README.md
index 8184e39..be1ce58 100644
--- a/README.md
+++ b/README.md
@@ -4,4 +4,4 @@
 1. Build image: `docker build . -t ecai2025`
 2. Choose the script `<script_name>.py` to execute
 2. Run container: `docker run [-d] --rm -v ecai:/workspace/results ecai2025 python <script_name>.py`
-3. Results available at `/var/lib/docker/volumes/ecai/_data/results/*`
+3. Results available at `/var/lib/docker/volumes/ecai/_data/*`
diff --git a/config.yaml b/config.yaml
index 76b4fda..22ed8f4 100644
--- a/config.yaml
+++ b/config.yaml
@@ -1,9 +1,10 @@
-invar:                            # Invariant configs
-  n_modmax: 2                     # Max number of modalities per node
-  gpop_ss: 10000                  # Sample size (general population)
-  ratio: 10                       # Sample sizes ratio (i.e., pool : reference population: 1 : ratio)
-  error: np.arange(0, 1, 0.05)    # Error (alpha) range
-  n_bns: 5                        # Number of BNs to extract from credal set  
+invar:                              # Invariant configs
+  n_modmax: 2                       # Max number of modalities per node
+  gpop_ss: 10000                    # Sample size (general population)
+  rpop_ss: 5000                     # Sample size (reference population)
+  pool_ss: 1000                     # Sample size (pool)
+  error: np.arange(0, 1, 0.05)      # Error (alpha) range
+  n_bns: 5                          # Number of BNs to extract from credal set  
 
 var:                                # Variable configs
   - n_nodes: 5                      # Number of nodes
@@ -12,8 +13,8 @@ var:                                # Variable configs
     eps: 0.001                      # Contamination for CN
     meta: exp_1                     # Number of experiment
 
-  - n_nodes: 10
-    n_arcs : 15
-    ess: 1
-    eps: 0.001
-    meta: exp_2
+  # - n_nodes: 50                     # Note: at 100 nodes, 0 power for gpop_ss = [1e4, 3e4].
+  #   n_arcs : 70
+  #   ess: 1
+  #   eps: 0.001
+  #   meta: exp_2
diff --git a/exp_contamination.py b/exp_contamination.py
index 5ee27ce..28bc42f 100644
--- a/exp_contamination.py
+++ b/exp_contamination.py
@@ -12,7 +12,7 @@ import yaml
 
 from utils import *
 
-warnings.filterwarnings('once')
+warnings.filterwarnings('ignore')
 
 if __name__ == "__main__":
 
@@ -169,4 +169,4 @@ if __name__ == "__main__":
             results[f"power_BN_v_{i}"] = power_bn_vertex
 
         # Save results
-        results.to_csv(f"./results/cont/{conf['meta']}-compl{compl}.csv")
\ No newline at end of file
+        results.to_csv(f"./results/cont/{conf['meta']}-compl{compl}.csv")
diff --git a/exp_local_IDM.py b/exp_local_IDM.py
index eb29eec..f7100f1 100644
--- a/exp_local_IDM.py
+++ b/exp_local_IDM.py
@@ -12,7 +12,7 @@ import yaml
 
 from utils import *
 
-warnings.filterwarnings('once')
+warnings.filterwarnings('ignore')
 
 if __name__ == "__main__":
 
@@ -26,7 +26,8 @@ if __name__ == "__main__":
 
     n_modmax = config["invar"]["n_modmax"]
     gpop_ss = config["invar"]["gpop_ss"]
-    ratio = config["invar"]["ratio"]
+    rpop_ss = config["invar"]["rpop_ss"]
+    pool_ss = config["invar"]["pool_ss"]
     error = eval(config["invar"]["error"])
     n_bns = config["invar"]["n_bns"]
 
@@ -44,20 +45,21 @@ if __name__ == "__main__":
         bn_gen = gum.BNGenerator()
         bn = bn_gen.generate(n_nodes=n_nodes, n_arcs=n_arcs, n_modmax=n_modmax)
 
-        # Sample data   
+        # Sample data
         data_gen = gum.BNDatabaseGenerator(bn)
         data_gen.drawSamples(gpop_ss)
         data_gen.setDiscretizedLabelModeRandom()
         gpop = data_gen.to_pandas()
 
-        pool_ss = gpop_ss // (ratio + 1)
-        pool_idx = np.random.choice(gpop_ss, replace=False, size=pool_ss)
+        pool_idx = np.random.choice(range(gpop_ss), size=pool_ss, replace=False)
         pool = gpop.iloc[pool_idx]
-        rpop = gpop.iloc[~ gpop.index.isin(pool_idx)]
+        rpop_idx = np.random.choice(range(gpop_ss), size=rpop_ss, replace=False)
+        rpop = gpop.iloc[rpop_idx]
 
         # Debug
-        # assert(gpop_ss == gpop.shape[0])
-        # assert(pool.shape[0] + rpop.shape[0] == gpop_ss)
+        # assert(gpop.shape[0] == gpop_ss)
+        # assert(pool.shape[0] == pool_ss)
+        # assert(rpop.shape[0] == rpop_ss)
 
         # Estimate BN(theta) from rpop and BN(theta_hat) from pool
         theta_learner=gum.BNLearner(rpop)
@@ -176,5 +178,15 @@ if __name__ == "__main__":
             # Store results
             results[f"power_BN_v_{i}"] = power_bn_vertex
 
+
         # Save results
-        results.to_csv(f"./results/idm/{conf['meta']}-compl{compl}.csv")
\ No newline at end of file
+        r_cn = results.iloc[:,-n_bns:]
+        assert(r_cn.shape[1] == n_bns)
+
+        results["CN_avg"] = r_cn.mean(axis=1)
+        results["CN_max"] = r_cn.max(axis=1)
+        results["CN_min"] = r_cn.min(axis=1)
+
+        results[["error", "power_bound", "power_BN", "CN_avg", "CN_max", "CN_min"]].to_csv(
+            f"./results/idm/{conf['meta']}-compl{compl}.csv",
+            index=False)
